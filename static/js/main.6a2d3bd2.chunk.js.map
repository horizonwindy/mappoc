{"version":3,"sources":["pages/proximity.js","pages/chartpage.js","pages/chartd3.js","pages/com/rangeinfo.js","pages/leafpage.js","poc/poc.jsx","longdo-map/LongdoMap.js","pages/longdoMap.js","pages/longdoMapOOH.js","pages/mapbox-component/left-panel.js","pages/mapboxMap.js","google-cluster-map/Map.js","google-cluster-map/CustomMarker.js","google-cluster-map/MapContainer.js","pages/googleMapCluster.js","App.js","reportWebVitals.js","index.js"],"names":["Proximity","_useState","useState","_useState2","_slicedToArray","map","setMap","_useState3","_useState4","radius","setRadius","_useState5","_useState6","autocomplete","setAutocomplete","_useState7","_useState8","searchWord","setSearchsWord","_useState9","_useState10","circles","setCircle","_useState11","lat","lng","center","_useState13","_useState14","selectMarker","setSelectMarker","isLoaded","useJsApiLoader","id","googleMapsApiKey","libraries","options","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","clickable","draggable","editable","visible","zIndex","onMapLoad","useCallback","onMapUnmount","setSelectLocation","place","length","selectPlace","l","geometry","location","circle","Object","assign","name","genId","concat","_toConsumableArray","console","log","setCenter","setZoom","setSearchWord","e","target","value","Date","now","toString","Math","random","substring","_jsx","_Fragment","children","className","_jsxs","GoogleMap","mapContainerStyle","width","height","zoom","onLoad","onUnmount","StandaloneSearchBox","ref","onPlacesChanged","getPlaces","type","placeholder","style","boxSizing","border","padding","borderRadius","boxShadow","fontSize","outline","textOverflow","position","left","marginLeft","onBlur","onChange","Circle","InfoWindow","parseInt","onClick","remap","submit","s","href","data","find","index","findIndex","splice","removeCircle","ChartPage","hoverData","setHoverData","chart","title","text","subtitle","xAxis","categories","series","plotOptions","point","events","mouseOver","category","chartOptions","setChartOptions","HighchartsReact","highcharts","Highcharts","ChartD3","useEffect","drawChart","svgRef","useRef","yAxisRef","wrapperRef","d3","current","append","attr","RangeInfo","_ref","rangeList","range","backgroundColor","color","LeafMap","geoData","setGeoData","setIsloaded","selectAll","setSelectAll","geojson","fetch","then","response","json","selectItem","select","feature","properties","selected","layer","resetStyle","setStyle","weight","dashArray","bringToFront","eachLayer","MapContainer","doubleClickZoom","TileLayer","attribution","url","GeoJSON","d","p","opacity","onEachFeature","on","click","PocPage","longdo","markercluster","setData","isLoad","setIsLoad","getData","userId","LongdoMap","_Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","mapCallback","bind","_assertThisInitialized","_createClass","key","_this2","window","Map","document","getElementById","this","language","existingScriptCluster","callback","lmc","MarkerCluster","minClusterSize","clustersScript","createElement","src","process","body","appendChild","onload","Event","result","_this3","existingScript","script","mapKey","Component","LongdoMapPage","listCircle","setListCircle","setOptions","isLoading","setIsLoading","lon","Layers","setBase","POI","Search","limit","addMarkers","Marker","render","AsyncTypeahead","labelKey","option","currentPlace","detail","lineWidth","lineColor","Overlays","add","circleL","AddCircle","clear","onSearch","query","keyword","axios","get","res","item","catch","handleSelectMarker","circlelist","remove","assetOption","LongdoMapOOHPage","_useState12","assetType","setAssetType","rawData","setRawDate","_useState15","_useState16","Count","renderMarkerCluster","dataMarkerCluster","time","clearMarkers","mapMarkerList","clearData","filter","Latitude","len","Longitude","push","icon","Path","Icon","offset","x","y","size","Width","Height","popup","html","FileName","Name","timeEnd","handleMarkerFilter","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","_","take","pov","station","stop","apply","arguments","assetSelect","opt","background","marginTop","maxHeight","overflowX","LeftPanel","items","selectedItem","setSelectedItem","useMap","inx","classItem","val","flyTo","layerMarkerStyle","paint","layerClusterMarkerStyle","layout","layerUnClusterMarkerStyle","MapBoxPage","_assetOption$find$nam","mapRef","longitude","latitude","viewState","setViewState","markerList","setMarkerList","mapSourceData","setMapSourceData","popupInfo","setPopupInfo","startTime","getTime","endTime","fetchInfo","respone","sent","abrupt","_ref2","_callee2","objectMarkerData","staticFilePath","mapModel","_context2","keys","Lat","ID","filename","orderBy","handleDataToSource","_ref3","_callee3","baseModel","mapFeatures","_context3","coordinates","file","features","handleSetShowPopup","currentLocation","findNearBy","placeLocation","getDistance","lngLat","dataInfo","handleMapLoadEvent","_ref4","_callee4","_context4","loadImage","error","image","addImage","handleMapOnClickEvent","_ref5","_callee5","clusterId","_context5","cluster_id","getSource","getClusterExpansionZoom","err","easeTo","_x","handleMapMouseEnterEvent","_ref6","_callee6","_context6","_x2","handleMapMouseLeaveEvent","_ref7","_callee7","_context7","init","_ref8","_callee8","assetDate","arrayList","_context8","POV_LatLong","_objectSpread","onMove","evt","mapStyle","interactiveLayerIds","minZoom","onIdle","onMouseEnter","onMouseLeave","mapboxAccessToken","Source","cluster","Layer","Popup","tipSize","onClose","NavigationControl","a","initialCenter","disableDefaultUI","scaleControl","mapTypeId","labels","gestureHandling","defaultZoom","_useLoadScript","useLoadScript","loadError","CustomMarker","clusterer","fnOnClickMarker","markerType","buildingIcon","anchor","google","maps","Point","scaledSize","Size","stationIcon","toLowerCase","indexOf","locations","locationType","defaultCenter","locs","setLocs","selectedMarker","setSelectedMarker","imagePath","mapFitBounds","bounds","LatLngBounds","loc","extend","LatLng","fitBounds","fileName","Lon","onCloseInfoWindow","mapWrapper","useMemo","MarkerClusterer","uuidv4","onCloseClick","right","bottom","cursor","textAlign","LOCATION_TYPE","Station_LatLong","GoogleMapClusterPage","setLocationType","locationData","setLocationData","locationFiltered","setLocationFiltered","setDefaultCenter","fetchLocationInfo","initialize","rawDataLocations","Fragment","fontWeight","margin","minWidth","paddingBottom","locationDetail","App","Router","Link","to","Switch","Route","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","React","StrictMode"],"mappings":"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","file":"static/js/main.6a2d3bd2.chunk.js","sourcesContent":["import { GoogleMap, useJsApiLoader, Circle, StandaloneSearchBox, InfoWindow } from '@react-google-maps/api'\r\nimport React, { useCallback, useState } from 'react'\r\n\r\nfunction Proximity () {\r\n  const [map, setMap] = useState(null)\r\n  const [radius, setRadius] = useState(500)\r\n  const [autocomplete, setAutocomplete] = useState(null)\r\n  const [searchWord, setSearchsWord] = useState('')\r\n  const [circles, setCircle] = useState([])\r\n  const [center] = useState({\r\n    lat: 13.75048227696903,\r\n    lng: 100.52021766870401\r\n  })\r\n  const [selectMarker, setSelectMarker] = useState(null)\r\n\r\n  const { isLoaded } = useJsApiLoader({\r\n    id: 'google-map-script',\r\n    googleMapsApiKey: 'AIzaSyB7rwsuBY8Nj2Eyt31J5GrRfsJ4CmvX_-Y',\r\n    libraries: ['places']\r\n  })\r\n\r\n  const containerStyle = {\r\n    width: '100%',\r\n    height: '100vh'\r\n  }\r\n\r\n  const options = {\r\n    strokeColor: '#FF0000',\r\n    strokeOpacity: 0.8,\r\n    strokeWeight: 2,\r\n    fillColor: '#FF0000',\r\n    fillOpacity: 0.35,\r\n    clickable: false,\r\n    draggable: false,\r\n    editable: false,\r\n    visible: true,\r\n    zIndex: 1\r\n  }\r\n\r\n  const onMapLoad = useCallback(function callback (map) {\r\n    setMap(map)\r\n  })\r\n  const onMapUnmount = useCallback(function callback () {\r\n    setMap(null)\r\n  }, [])\r\n\r\n  const handleSetRadius = (e) => {\r\n    setRadius(parseInt(e.target.value))\r\n  }\r\n\r\n  const onPlacesChanged = () => {\r\n    if (autocomplete !== null) {\r\n      const location = autocomplete.getPlaces()\r\n      setSelectLocation(location)\r\n      setSearchsWord('')\r\n    } else {\r\n      console.log('Autocomplete is not loaded yet!')\r\n    }\r\n  }\r\n\r\n  const setSelectLocation = (place) => {\r\n    if (place.length > 0) {\r\n      const selectPlace = place[0]\r\n      const l = selectPlace.geometry.location\r\n      const circle = {\r\n        center: {\r\n          lat: l.lat(),\r\n          lng: l.lng()\r\n        },\r\n        options: Object.assign(options),\r\n        name: selectPlace.name,\r\n        radius: radius,\r\n        id: genId()\r\n      }\r\n      // circle.options.radius = radius;\r\n      setCircle([...circles, circle])\r\n      console.log(circle)\r\n      map.setCenter(circle.center)\r\n      map.setZoom(15)\r\n      setSelectMarker(circle.id)\r\n    }\r\n  }\r\n\r\n  const setSearchWord = (e) => {\r\n    setSearchsWord(e.target.value)\r\n  }\r\n\r\n  const genId = () => {\r\n    return Date.now().toString(36) + Math.random().toString(36).substring(2)\r\n  }\r\n\r\n  const onAutoSearchLoad = (ref) => {\r\n    setAutocomplete(ref)\r\n  }\r\n\r\n  const removeCircle = (id) => {\r\n    const find = [...circles]\r\n    const index = find.findIndex((circle) => circle.id === id)\r\n    if (index !== -1) {\r\n      find.splice(index, 1)\r\n      setCircle(find)\r\n    }\r\n  }\r\n\r\n  const handleSelectMarker = (data) => {\r\n    map.setCenter(data.center)\r\n    setSelectMarker(data.id)\r\n  }\r\n\r\n  const handleSubmit = () => {\r\n    const submit = circles.map(s => {\r\n      return {\r\n        name: s.name,\r\n        radius: s.radius,\r\n        location: s.center\r\n      }\r\n    })\r\n    // Call Api\r\n    console.log(submit)\r\n  }\r\n\r\n  const handleChangeRadius = () => {\r\n    const test = [...circles]\r\n    const remap = test.map((circle) => {\r\n      circle.radius = radius\r\n      return circle\r\n    })\r\n    console.log(remap)\r\n    setCircle(remap)\r\n  }\r\n\r\n  return (\r\n        <>\r\n            <div className=\"container-fluid\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-10\">\r\n                        {\r\n                            isLoaded &&\r\n                            (\r\n                                <GoogleMap\r\n                                    mapContainerStyle={containerStyle}\r\n                                    center={center}\r\n                                    zoom={10}\r\n                                    onLoad={onMapLoad}\r\n                                    onUnmount={onMapUnmount}\r\n                                >\r\n                                    <StandaloneSearchBox\r\n                                        onLoad={onAutoSearchLoad}\r\n                                        onPlacesChanged={\r\n                                            onPlacesChanged\r\n                                        }\r\n                                    >\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            placeholder=\"Place Search\"\r\n                                            style={{\r\n                                              boxSizing: 'border-box',\r\n                                              border: '1px solid transparent',\r\n                                              width: '240px',\r\n                                              height: '32px',\r\n                                              padding: '0 12px',\r\n                                              borderRadius: '3px',\r\n                                              boxShadow: '0 2px 6px rgba(0, 0, 0, 0.3)',\r\n                                              fontSize: '14px',\r\n                                              outline: 'none',\r\n                                              textOverflow: 'ellipses',\r\n                                              position: 'absolute',\r\n                                              left: '50%',\r\n                                              marginLeft: '-120px'\r\n                                            }}\r\n                                            onBlur={setSearchWord}\r\n                                            onChange={setSearchWord}\r\n                                            value={searchWord}\r\n                                        />\r\n                                    </StandaloneSearchBox>\r\n                                    {\r\n                                        circles.map((circle) => (\r\n                                            <>\r\n                                                <Circle\r\n                                                    key={(circle.id + 'circle')}\r\n                                                    center={circle.center}\r\n                                                    // required\r\n                                                    radius={circle.radius}\r\n                                                    options={circle.options}\r\n                                                />\r\n                                                <InfoWindow position={circle.center}\r\n                                                    key={(circle.id + 'info')}>\r\n                                                    <div>{circle.name}</div>\r\n                                                </InfoWindow>\r\n                                            </>\r\n\r\n                                        )\r\n                                        )\r\n                                    }\r\n                                </GoogleMap>\r\n                            )\r\n                        }\r\n                    </div>\r\n                    <div className=\"col-2\">\r\n                        <div className=\"m-2\">\r\n                            <label>\r\n                                Geofence size\r\n                            </label>\r\n                            <div className=\"input-group mb-3\">\r\n                                <input type=\"number\" onChange={handleSetRadius} value={radius}></input>\r\n                                <span className=\"p-2\">meter</span>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <button type=\"button\" onClick={handleChangeRadius} className=\"btn btn-primary m-2\">Appear ALL</button>\r\n                            <button type=\"button\" onClick={handleSubmit} className=\"btn btn-success m-2\" >Cal</button>\r\n                        </div>\r\n                        <div>\r\n                            <label>\r\n                                PLACES\r\n                            </label>\r\n                        </div>\r\n                        <div>\r\n                            <div className=\"list-group\">\r\n                                {\r\n                                    circles.map((circle) => (\r\n                                        <a href=\"#\" className={'list-group-item d-flex justify-content-between align-items-center ' + (circle.id === selectMarker && 'active') + ''}\r\n                                            key={circle.id + 'list'}\r\n                                            onClick={() => handleSelectMarker(circle)}\r\n                                        >{circle.name}\r\n                                            <span className=\"badge\" ><button type=\"button\"\r\n                                                onClick={() => removeCircle(circle.id)}>x</button></span>\r\n                                        </a>\r\n                                    ))\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>)\r\n}\r\n\r\nexport default Proximity\r\n","import React,{ useState } from 'react'\r\nimport Highcharts from 'highcharts'\r\nimport HighchartsReact from 'highcharts-react-official'\r\n\r\nfunction ChartPage () {\r\n  const [hoverData,setHoverData]= useState(null);\r\n  const [chartOptions,setChartOptions] = useState({\r\n    chart: {\r\n      type: 'bar'\r\n    },\r\n    title: {\r\n      text: 'Historic World Population by Region'\r\n    },\r\n    subtitle: {\r\n      text: 'Source: <a href=\"https://en.wikipedia.org/wiki/World_population\">Wikipedia.org</a>'\r\n    },\r\n    xAxis: {\r\n      categories: ['A', 'B', 'C'],\r\n    },\r\n    series: [\r\n      { data: [1, 2, 3] }\r\n    ],\r\n    plotOptions: {\r\n      series: {\r\n        point: {\r\n          events: {\r\n            mouseOver(e){\r\n              setHoverData(e.target.category)\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  })\r\nconst updateSeries = () =>{\r\n  setChartOptions({\r\n    series:[\r\n      {data : [Math.random()*5,2,1]}\r\n    ]\r\n  })\r\n}\r\n\r\n  return (<>\r\n    <HighchartsReact\r\n   highcharts={Highcharts}\r\n   options={chartOptions}\r\n    />\r\n    <h3>Hovering over {hoverData}</h3>\r\n    <button onClick={updateSeries}>Update Series</button>\r\n  </>)\r\n}\r\n\r\nexport default ChartPage\r\n","import * as d3 from \"d3\";\r\nimport React, { useEffect, useRef } from \"react\";\r\n//import useResizeObserver from \"./useResizeObserver\";\r\n\r\nfunction ChartD3() {\r\n  useEffect(() => {\r\n    drawChart();\r\n  }, []);\r\n  const svgRef = useRef();\r\n  const yAxisRef = useRef();\r\n  const wrapperRef = useRef();\r\n  /*\r\n  const dimensions = useResizeObserver(wrapperRef);\r\n\r\n  const data = [\r\n    {\r\n      key: \"2021-01-01 01:30\",\r\n      average_cool: 0,\r\n      average_heat: 0.54,\r\n      cool_runtime: 0,\r\n      heat_runtime: 0.19,\r\n      total_cool_1: 0,\r\n      total_cool_2: 0,\r\n      total_electric_heat: 0,\r\n      total_fan_cooling: 0,\r\n      total_fan_heating: 0,\r\n      total_heat_1: 0.1,\r\n      total_heat_2: 0,\r\n    },\r\n    {\r\n      key: \"2021-01-01 01:45\",\r\n      average_cool: 0,\r\n      average_heat: 0.66,\r\n      cool_runtime: 0,\r\n      heat_runtime: 0.25,\r\n      total_cool_1: 0,\r\n      total_cool_2: 0,\r\n      total_electric_heat: 0,\r\n      total_fan_cooling: 0,\r\n      total_fan_heating: 0,\r\n      total_heat_1: 0.17,\r\n      total_heat_2: 0,\r\n    },\r\n    {\r\n      key: \"2021-01-01 02:00\",\r\n      average_cool: 0,\r\n      average_heat: 0.82,\r\n      cool_runtime: 0,\r\n      heat_runtime: 0.25,\r\n      total_cool_1: 0,\r\n      total_cool_2: 0,\r\n      total_electric_heat: 0,\r\n      total_fan_cooling: 0,\r\n      total_fan_heating: 0,\r\n      total_heat_1: 0.2,\r\n      total_heat_2: 0,\r\n    },\r\n    {\r\n      key: \"2021-01-01 02:15\",\r\n      average_cool: 0,\r\n      average_heat: 0.65,\r\n      cool_runtime: 0,\r\n      heat_runtime: 0.25,\r\n      total_cool_1: 0,\r\n      total_cool_2: 0,\r\n      total_electric_heat: 0,\r\n      total_fan_cooling: 0,\r\n      total_fan_heating: 0,\r\n      total_heat_1: 0.16,\r\n      total_heat_2: 0,\r\n    },\r\n  ];\r\n  \r\n  csont colors = {\r\n    average_cool: \"red\",\r\n    average_heat: \"green\",\r\n    cool_runtime: \"blue\",\r\n    heat_runtime: \"purple\",\r\n    total_cool_1: \"pink\",\r\n    total_cool_2: \"yellow\",\r\n    total_electric_heat: \"cyan\",\r\n    total_fan_cooling: \"aliceblue\",\r\n    total_fan_heating: \"firebrick\",\r\n    total_heat_1: \"darkgoldenrod\",\r\n    total_heat_2: \"brown\",\r\n    total_records: \"red\",\r\n  };\r\n  \r\n  const keys = [\r\n    \"average_cool\",\r\n    \"average_heat\",\r\n    \"cool_runtime\",\r\n    \"heat_runtime\",\r\n    \"total_cool_1\",\r\n    \"total_cool_2\",\r\n    \"total_electric_heat\",\r\n    \"total_fan_cooling\",\r\n    \"total_fan_heating\",\r\n    \"total_heat_1\",\r\n    \"total_heat_2\",\r\n    \"total_records\",\r\n  ];\r\n  */\r\n  const drawChart = () => {\r\n    const svg = d3.select(svgRef.current);\r\n    //const yAxisSvg = d3.select(yAxisRef.current);\r\n    /*\r\n    const { height } = wrapperRef.current.getBoundingClientRect();\r\n    const stackGenerator = dimensions || d3.stack().keys(keys).order(d3.stackOrderAscending);\r\n    const layers = stackGenerator(data);\r\n    const extent = [\r\n      0,\r\n      d3.max(layers, (layer) => d3.max(layer, (sequence) => sequence[1] + 0.2)),\r\n    ];\r\n    */\r\n    /*\r\n    const xScale = d3\r\n      .scaleBand()\r\n      .domain(data.map((d) => d.key))\r\n      .range([0, data.length * 50])\r\n      .padding(0.2);\r\n\r\n    const yScale = d3\r\n      .scaleLinear()\r\n      .domain(extent)\r\n      .range([height + 50, 0]);\r\n     */\r\n    // rendering\r\n    /*svg\r\n      .attr(\"width\", data.length * 50)\r\n      .attr(\"height\", height)\r\n      .selectAll(\".layer\")\r\n      .data(layers)\r\n      .join(\"g\")\r\n      .attr(\"class\", \"layer\")\r\n      .attr(\"fill\", (layer) => colors[layer.key])\r\n      .selectAll(\"rect\")\r\n      .data((layer) => layer)\r\n      .join(\"rect\")\r\n      .attr(\"class\", \"data-bar\")\r\n      .attr(\"x\", (sequence) => xScale(sequence.data.key))\r\n      .attr(\"width\", xScale.bandwidth())\r\n      .attr(\"y\", (sequence) => yScale(sequence[1]))\r\n      .attr(\"height\", (sequence) => {\r\n        if (!isNaN(sequence[0]) && !isNaN(sequence[1])) {\r\n          return yScale(sequence[0]) - yScale(sequence[1]);\r\n        } else {\r\n          return 0;\r\n        }\r\n      });\r\n\r\n    // axes\r\n    const xAxis = d3.axisBottom(xScale);\r\n    svg\r\n      .select(\".x-axis\")\r\n      .attr(\"transform\", `translate(0, ${height + 50})`)\r\n      .call(xAxis)\r\n      .selectAll(\"text\")\r\n      .style(\"text-anchor\", \"end\")\r\n      .attr(\"dx\", \"-.8em\")\r\n      .attr(\"dy\", \".15em\")\r\n      .attr(\"transform\", \"rotate(-65)\");\r\n\r\n    const yAxis = d3.axisLeft(yScale);\r\n    yAxisSvg.select(\".y-axis\").attr(\"height\", height).call(yAxis);\r\n    */\r\n\r\n    svg.append(\"circle\").attr(\"cx\",150).attr(\"cy\",70).attr(\"r\",50)\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div ref={wrapperRef}>\r\n        <div>\r\n          <svg ref={yAxisRef}>\r\n            <g />\r\n          </svg>\r\n        </div>\r\n        <div>\r\n          <svg ref={svgRef}>\r\n            <g />\r\n          </svg>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ChartD3;\r\n","import PropTypes from \"prop-types\";\r\nimport \"./range.css\";\r\n\r\nfunction RangeInfo({ position, rangeList }) {\r\n  return (\r\n    <div className={position}>\r\n      <div className=\"info legend leaflet-control\">\r\n        <div className=\"row\">\r\n          {rangeList.map((range) => {\r\n            return (\r\n              <div key={range.color} className=\"col-12 m-1\">\r\n                <i\r\n                  className=\"iconcolor\"\r\n                  style={{ backgroundColor: range.color }}\r\n                ></i>\r\n                {range.name}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nRangeInfo.propTypes = {\r\n  position: PropTypes.string,\r\n  rangeList: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      color: PropTypes.string,\r\n      name: PropTypes.string,\r\n    })\r\n  ),\r\n};\r\nexport default RangeInfo;\r\n","import { MapContainer, TileLayer, GeoJSON } from \"react-leaflet\";\r\nimport { useEffect, useState, useRef } from \"react\";\r\nimport RangeInfo from \"./com/rangeinfo\";\r\n\r\nfunction LeafMap() {\r\n  const [geoData, setGeoData] = useState([]);\r\n  const [isLoaded, setIsloaded] = useState(false);\r\n  const [selectAll, setSelectAll] = useState(false);\r\n  const geojson = useRef();\r\n\r\n  useEffect(() => {\r\n    function init() {\r\n      setIsloaded(false);\r\n      fetch(\r\n        \"https://raw.githubusercontent.com/apisit/thailand.json/master/thailandwithdensity.json\"\r\n      )\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          setIsloaded(true);\r\n          setGeoData(data);\r\n          console.log(data);\r\n        });\r\n    }\r\n    init();\r\n  }, []);\r\n\r\n  const getColor = (d) => {\r\n    return d > 1000\r\n      ? \"#800026\"\r\n      : d > 500\r\n      ? \"#BD0026\"\r\n      : d > 200\r\n      ? \"#E31A1C\"\r\n      : d > 100\r\n      ? \"#FC4E2A\"\r\n      : d > 50\r\n      ? \"#FD8D3C\"\r\n      : d > 20\r\n      ? \"#FEB24C\"\r\n      : d > 10\r\n      ? \"#FED976\"\r\n      : \"#FFEDA0\";\r\n  };\r\n\r\n  const listMock = [\r\n    {\r\n      color: \"#800026\",\r\n      name: \"1000\",\r\n    },\r\n    {\r\n      color: \"#BD0026\",\r\n      name: \"500\",\r\n    },\r\n  ];\r\n\r\n  const geoDatastyle = (feature) => {\r\n    return {\r\n      fillColor: getColor(feature.properties.p),\r\n      weight: 2,\r\n      opacity: 1,\r\n      color: \"white\",\r\n      dashArray: \"3\",\r\n      fillOpacity: 0.7,\r\n    };\r\n  };\r\n\r\n  const onEachFeature = (feature, layer) => {\r\n    layer.on({\r\n      //mouseover: highlightFeature,\r\n      //mouseout: resetHighlight,\r\n      click: selectItem,\r\n    });\r\n  };\r\n\r\n  const selectItem = (e) => {\r\n    const select = e.target.feature.properties.selected;\r\n    let layer = e.target;\r\n    if (select) {\r\n      e.target.feature.properties.selected = false;\r\n      geojson.current.resetStyle(layer);\r\n    } else {\r\n      e.target.feature.properties.selected = true;\r\n      layer.setStyle({\r\n        weight: 10,\r\n        color: \"#ffffff\",\r\n        dashArray: \"\",\r\n        fillOpacity: 0.9,\r\n      });\r\n      layer.bringToFront();\r\n    }\r\n  };\r\n\r\n  const setAll = () => {\r\n    let geo = geojson.current;\r\n    geo.eachLayer(function (layer) {\r\n      if(!selectAll){\r\n        layer.feature.properties.selected = !selectAll;\r\n        layer.setStyle({\r\n          weight: 10,\r\n          color: \"#ffffff\",\r\n          dashArray: \"\",\r\n          fillOpacity: 0.9,\r\n        });\r\n        layer.bringToFront();\r\n      }\r\n      else{\r\n        layer.feature.properties.selected = false;\r\n        geojson.current.resetStyle(layer);\r\n      }\r\n      \r\n    });\r\n    setSelectAll(!selectAll);\r\n  };\r\n  /*\r\n  const highlightFeature = (e) => {\r\n    console.log(e);\r\n  };\r\n\r\n  const resetHighlight = (e) => {\r\n    console.log(e);\r\n    \r\n  };*/\r\n\r\n  return (\r\n    <div>\r\n      <button\r\n        type=\"button\"\r\n        onClick={() => {\r\n          console.log(geoData);\r\n        }}\r\n      >\r\n        show\r\n      </button>\r\n      <button type=\"button\" onClick={setAll}>\r\n        test SetAll\r\n      </button>\r\n      {isLoaded && (\r\n        <MapContainer center={[13.75, 100.52]} zoom={10} doubleClickZoom={false}>\r\n          <TileLayer\r\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n            // url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          />\r\n          <GeoJSON\r\n            ref={geojson}\r\n            attribution=\"&copy; credits due...\"\r\n            data={geoData}\r\n            style={geoDatastyle}\r\n            onEachFeature={onEachFeature}\r\n          ></GeoJSON>\r\n          <RangeInfo\r\n            position=\"leaflet-bottom leaflet-right\"\r\n            rangeList={listMock}\r\n          />\r\n        </MapContainer>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LeafMap;\r\n","import { useEffect, useState } from \"react\";\r\n\r\nfunction PocPage() {\r\n  const [data, setData] = useState({});\r\n  const [isLoad, setIsLoad] = useState(false);\r\n\r\n  const getData = () => {\r\n    try {\r\n      setIsLoad(true);\r\n      fetch(\"https://jsonplaceholder.typicode.com/todos/1\")\r\n        .then((response) => response.json())\r\n        .then((json) => {\r\n          setData(json);\r\n          setIsLoad(false);\r\n        });\r\n    } catch (e) {\r\n      setIsLoad(false);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    function init() {\r\n      getData();\r\n    }\r\n    init();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {isLoad ? (\r\n        <div>Loading</div>\r\n      ) : (\r\n        <div>\r\n          <label>{data.userId}</label>\r\n          <label>{data.id}</label>\r\n          <label>{data.title}</label>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\nexport default PocPage;\r\n","import React, { Component } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\n\r\nexport let longdo\r\nexport let map\r\nexport let markercluster\r\n\r\nexport class LongdoMap extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.mapCallback = this.mapCallback.bind(this)\r\n  }\r\n\r\n  mapCallback() {\r\n    longdo = window.longdo\r\n    map = new window.longdo.Map({\r\n      placeholder: document.getElementById(this.props.id),\r\n      language: \"en\",\r\n    })\r\n\r\n    const existingScriptCluster = document.getElementById(\r\n      \"longdoMapClusterScript\"\r\n    )\r\n    const callback = this.props.callback\r\n    if (!existingScriptCluster) {\r\n      // add cluser\r\n      const clustersScript = document.createElement(\"script\")\r\n      // eslint-disable-next-line no-undef\r\n      clustersScript.src = `${process.env.PUBLIC_URL}/longdo/longdomap.markercluster-src.js`\r\n      clustersScript.id = \"longdoMapClusterScript\"\r\n      document.body.appendChild(clustersScript)\r\n      clustersScript.onload = () => {\r\n        this.mapCallback()\r\n        if (callback) callback()\r\n      }\r\n    } else {\r\n      if (window.lmc) {\r\n        markercluster = new window.lmc.MarkerCluster(map, {\r\n          minClusterSize: 2,\r\n        })\r\n      }\r\n    }\r\n\r\n    map.Event.bind('zoom', function() {\r\n      var result = map.zoom(); // Get the zoom value\r\n      console.log(result);\r\n    });\r\n\r\n    map.Event.bind('ready', function() { // When map is ready to use\r\n      console.log('ready');\r\n    });\r\n    \r\n  }\r\n\r\n  componentDidMount() {\r\n    const existingScript = document.getElementById(\"longdoMapScript\")\r\n\r\n    const callback = this.props.callback\r\n\r\n    if (!existingScript) {\r\n      const script = document.createElement(\"script\")\r\n      script.src = `https://api.longdo.com/map/?key=${this.props.mapKey}`\r\n      script.id = \"longdoMapScript\"\r\n      document.body.appendChild(script)\r\n\r\n      script.onload = () => {\r\n        this.mapCallback()\r\n        if (callback) callback()\r\n      }\r\n    }\r\n\r\n    if (existingScript) this.mapCallback()\r\n    if (existingScript && callback) callback()\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id={this.props.id} style={{ width: \"100%\", height: \"95vh\" }}></div>\r\n    )\r\n  }\r\n}\r\n\r\nLongdoMap.propTypes = {\r\n  callback: PropTypes.func.isRequired,\r\n  id: PropTypes.string.isRequired,\r\n  mapKey: PropTypes.string.isRequired,\r\n}\r\n","/* eslint-disable no-unused-vars */\r\nimport { useState, useRef, useEffect } from \"react\"\r\nimport { longdo, map, markercluster, LongdoMap } from \"../longdo-map/LongdoMap\"\r\nimport { AsyncTypeahead } from \"react-bootstrap-typeahead\"\r\nimport axios from \"axios\"\r\n\r\nconst meter = 0.0000046728\r\nfunction LongdoMapPage() {\r\n  const [listCircle, setListCircle] = useState([])\r\n  const [selectMarker, setSelectMarker] = useState({\r\n    id: \"\",\r\n  })\r\n  const [options, setOptions] = useState([])\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [radius, setRadius] = useState(1000)\r\n  const ref = useRef()\r\n\r\n  const initMap = () => {\r\n    map.Layers.setBase(longdo.Layers.POI)\r\n    map.Search.placeholder(document.getElementById(\"result\"))\r\n    if (markercluster) {\r\n      let limit = 50\r\n      while (limit--) {\r\n        var lat = 13.689128 + (Math.random() - 0.5) * 10,\r\n          lon = 100.491781 + (Math.random() - 0.5) * 10\r\n        markercluster.addMarkers(new longdo.Marker({ lat: lat, lon: lon }, {}))\r\n        markercluster.render()\r\n      }\r\n    }\r\n  }\r\n\r\n  const AddCircle = (place) => {\r\n    if (place.length > 0) {\r\n      const currentPlace = place[0]\r\n      const circle = new longdo.Circle(\r\n        {\r\n          lon: currentPlace.lon,\r\n          lat: currentPlace.lat,\r\n        },\r\n        meter * radius,\r\n        {\r\n          title: currentPlace.name,\r\n          detail: \"\",\r\n          lineWidth: 2,\r\n          lineColor: \"rgba(255, 0, 0, 0.8)\",\r\n          fillColor: \"rgba(255, 0, 0, 0.4)\",\r\n        }\r\n      )\r\n      map.Overlays.add(circle)\r\n      const circleL = {\r\n        id: currentPlace.id,\r\n        name: currentPlace.name,\r\n        circle: circle,\r\n        lon: currentPlace.lon,\r\n        lat: currentPlace.lat,\r\n      }\r\n      setListCircle([...listCircle, circleL])\r\n      console.log(\"AddCircle\")\r\n      map.location({ lon: currentPlace.lon, lat: currentPlace.lat }, true)\r\n    }\r\n  }\r\n\r\n  const handleSelectMarker = (circle) => {\r\n    console.log(circle)\r\n    setSelectMarker(circle)\r\n  }\r\n\r\n  const removeCircle = (circle) => {\r\n    const find = [...listCircle]\r\n    const index = find.findIndex((circlelist) => circlelist.id === circle.id)\r\n    if (index !== -1) {\r\n      find.splice(index, 1)\r\n      setListCircle(find)\r\n      map.Overlays.remove(circle.circle)\r\n    }\r\n  }\r\n\r\n  const selectItem = (selected) => {\r\n    AddCircle(selected)\r\n    ref.current.clear()\r\n  }\r\n\r\n  const onSearch = (query) => {\r\n    setIsLoading(true)\r\n    const keyword = query\r\n    const result = axios.get(\r\n      `https://search.longdo.com/mapsearch/json/search?keyword=${keyword}&area=10&span=3000km&limit=20&key=6ad60d62297802bbb148164084e1457f`\r\n    )\r\n    result\r\n      .then((res) => {\r\n        const { data } = res\r\n        const place = data.data.map((item) => {\r\n          const newResult = item\r\n          return newResult\r\n        })\r\n        setOptions(place)\r\n        setIsLoading(false)\r\n      })\r\n      .catch((e) => {\r\n        setIsLoading(false)\r\n      })\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (selectMarker.lon) {\r\n      map.location({ lon: selectMarker.lon, lat: selectMarker.lat }, true)\r\n    }\r\n  }, [selectMarker])\r\n  const mapKey = \"6ad60d62297802bbb148164084e1457f\"\r\n\r\n  return (\r\n    <>\r\n      <div className=\"row\">\r\n        <div className=\"col-10\">\r\n          <div className=\"App\">\r\n            <LongdoMap id=\"longdo-map\" mapKey={mapKey} callback={initMap} />\r\n          </div>\r\n        </div>\r\n        <div className=\"col-2\">\r\n          <div>\r\n            <label>Place</label>\r\n            <AsyncTypeahead\r\n              id={\"placeId\"}\r\n              labelKey={(option) => `${option.name}`}\r\n              isLoading={isLoading}\r\n              ref={ref}\r\n              onChange={selectItem}\r\n              options={options}\r\n              onSearch={onSearch}\r\n            ></AsyncTypeahead>\r\n          </div>\r\n          <div>\r\n            <label>Geofence size</label>\r\n            <div className=\"input-group mb-3\">\r\n              <input\r\n                type=\"text\"\r\n                onChange={(e) => setRadius(e.target.value)}\r\n                className=\"form-control\"\r\n                placeholder=\"meter\"\r\n                value={radius}\r\n              />\r\n              <span className=\"input-group-text\" id=\"basic-addon2\">\r\n                meter\r\n              </span>\r\n            </div>\r\n          </div>\r\n          {/*\r\n                    <div>\r\n                        <button onClick={AddCircle} >Add Circle</button>\r\n                    </div>\r\n                    */}\r\n          <div>Places</div>\r\n          <div className=\"list-group\">\r\n            {listCircle.map((circle) => (\r\n              <a\r\n                href=\"#\"\r\n                className={\r\n                  \"list-group-item d-flex justify-content-between align-items-center \" +\r\n                  (circle.id === selectMarker.id && \"active\") +\r\n                  \"\"\r\n                }\r\n                key={circle.id + \"list\"}\r\n                onClick={() => handleSelectMarker(circle)}\r\n              >\r\n                {circle.name}\r\n                <span className=\"badge\">\r\n                  <button type=\"button\" onClick={() => removeCircle(circle)}>\r\n                    x\r\n                  </button>\r\n                </span>\r\n              </a>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\nexport default LongdoMapPage\r\n","/* eslint-disable no-undef */\r\n/* eslint-disable no-unused-vars */\r\nimport { useState, useRef, useEffect } from \"react\"\r\nimport { longdo, map, markercluster, LongdoMap } from \"../longdo-map/LongdoMap\"\r\nimport { AsyncTypeahead } from \"react-bootstrap-typeahead\"\r\nimport axios from \"axios\"\r\nimport data from \"../Data/longdoModal/longdoModal15000.json\"\r\nimport _ from \"lodash\"\r\n\r\nconst assetOption = [\r\n  {\r\n    id: 1,\r\n    name: \"Pov Office\",\r\n    key: \"pov\",\r\n  },\r\n  {\r\n    id: 2,\r\n    name: \"Station\",\r\n    key: \"station\",\r\n  },\r\n]\r\nlet pupUp\r\nconst meter = 0.0000046728\r\nfunction LongdoMapOOHPage() {\r\n  const [listCircle, setListCircle] = useState([])\r\n  const [selectMarker, setSelectMarker] = useState({\r\n    id: \"\",\r\n  })\r\n  const [options, setOptions] = useState([])\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [radius, setRadius] = useState(1000)\r\n  const ref = useRef()\r\n\r\n  const [assetType, setAssetType] = useState(assetOption[0].key)\r\n  const [rawData, setRawDate] = useState({})\r\n  const [seconds, setSeconds] = useState(0)\r\n\r\n  const Count = 5000\r\n\r\n  const updateDetail = (element) => {\r\n    setTimeout(function () {\r\n      element.innerHTML = \"Content changed\"\r\n    }, 1000)\r\n  }\r\n\r\n  const renderMarkerCluster = (dataMarkerCluster) => {\r\n    if (rawData.length > 0) {\r\n      console.time()\r\n      markercluster.clearMarkers()\r\n      const mapMarkerList = []\r\n      if (dataMarkerCluster !== \"undefined\") {\r\n        const clearData = (dataMarkerCluster ?? []).filter(\r\n          (data) => typeof data.Latitude !== \"undefined\"\r\n        )\r\n        let len = clearData.length\r\n        while (len--) {\r\n          var d = clearData[len]\r\n          if (d.Latitude !== \"undefined\" && d.Longitude !== \"undefined\") {\r\n            mapMarkerList.push(\r\n              new longdo.Marker(\r\n                { lat: d.Latitude, lon: d.Longitude },\r\n                {\r\n                  icon: {\r\n                    // eslint-disable-next-line no-undef\r\n                    url: `${process.env.PUBLIC_URL}/${d.Path}/${d.Icon}`,\r\n                    offset: { x: 32, y: 32 },\r\n                    size: { width: d.Width, height: d.Height },\r\n                  },\r\n                  // popup: {\r\n                  //           title: d.FileName,\r\n                  //           detail: 'Popup detail...',\r\n                  //           loadDetail: updateDetail,\r\n                  //           size: { width: 200, height: 200 },\r\n                  //           closable: false\r\n                  //         }\r\n                  popup: {\r\n                    html: `\r\n                            <div style=\"background: #fff;width: 371px;height:100px;\">\r\n                                <div><img src=\"${process.env.PUBLIC_URL}/${d.Path}/${d.FileName}\" alt=\"${d.Name}\"></div>\r\n                                <div><h3>${d.Name}</h3></div>\r\n                            </div>\r\n                        `,\r\n                  },\r\n                }\r\n              )\r\n            )\r\n          }\r\n        }\r\n        markercluster.addMarkers(mapMarkerList)\r\n        markercluster.render()\r\n      }\r\n      console.timeEnd()\r\n    }\r\n  }\r\n\r\n  const handleSelectTypeChange = (assetSelect) => {\r\n    setAssetType(assetSelect)\r\n  }\r\n  const handleMarkerFilter = async () => {\r\n    if (assetType === \"pov\") {\r\n      setRawDate(_.take(data.pov, Count))\r\n      renderMarkerCluster(_.take(data.pov, Count))\r\n    } else {\r\n      setRawDate(_.take(data.station, Count))\r\n      renderMarkerCluster(_.take(data.station, Count))\r\n    }\r\n  }\r\n\r\n  const initMap = () => {\r\n    map.Layers.setBase(longdo.Layers.POI)\r\n    map.Search.placeholder(document.getElementById(\"result\"))\r\n    if (markercluster) {\r\n      handleMarkerFilter()\r\n    }\r\n  }\r\n\r\n  const AddCircle = (place) => {\r\n    if (place.length > 0) {\r\n      const currentPlace = place[0]\r\n      const circle = new longdo.Circle(\r\n        {\r\n          lon: currentPlace.lon,\r\n          lat: currentPlace.lat,\r\n        },\r\n        meter * radius,\r\n        {\r\n          title: currentPlace.name,\r\n          detail: \"\",\r\n          lineWidth: 2,\r\n          lineColor: \"rgba(255, 0, 0, 0.8)\",\r\n          fillColor: \"rgba(255, 0, 0, 0.4)\",\r\n        }\r\n      )\r\n      map.Overlays.add(circle)\r\n      const circleL = {\r\n        id: currentPlace.id,\r\n        name: currentPlace.name,\r\n        circle: circle,\r\n        lon: currentPlace.lon,\r\n        lat: currentPlace.lat,\r\n      }\r\n      setListCircle([...listCircle, circleL])\r\n      console.log(\"AddCircle\")\r\n      map.location({ lon: currentPlace.lon, lat: currentPlace.lat }, true)\r\n    }\r\n  }\r\n\r\n  const handleSelectMarker = (circle) => {\r\n    console.log(circle)\r\n    setSelectMarker(circle)\r\n  }\r\n\r\n  const removeCircle = (circle) => {\r\n    const find = [...listCircle]\r\n    const index = find.findIndex((circlelist) => circlelist.id === circle.id)\r\n    if (index !== -1) {\r\n      find.splice(index, 1)\r\n      setListCircle(find)\r\n      map.Overlays.remove(circle.circle)\r\n    }\r\n  }\r\n\r\n  const selectItem = (selected) => {\r\n    AddCircle(selected)\r\n    ref.current.clear()\r\n  }\r\n\r\n  const onSearch = (query) => {\r\n    setIsLoading(true)\r\n    const keyword = query\r\n    const result = axios.get(\r\n      `https://search.longdo.com/mapsearch/json/search?keyword=${keyword}&area=10&span=3000km&limit=20&key=6ad60d62297802bbb148164084e1457f`\r\n    )\r\n    result\r\n      .then((res) => {\r\n        const { data } = res\r\n        const place = data.data.map((item) => {\r\n          const newResult = item\r\n          return newResult\r\n        })\r\n        setOptions(place)\r\n        setIsLoading(false)\r\n      })\r\n      .catch((e) => {\r\n        setIsLoading(false)\r\n      })\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (selectMarker.lon) {\r\n      map.location({ lon: selectMarker.lon, lat: selectMarker.lat }, true)\r\n    }\r\n  }, [selectMarker])\r\n\r\n  useEffect(() => {\r\n    handleMarkerFilter()\r\n  }, [assetType])\r\n\r\n  const mapKey = \"6ad60d62297802bbb148164084e1457f\"\r\n\r\n  return (\r\n    <>\r\n      <div className=\"row\">\r\n        <div className=\"col-10\">\r\n          <div className=\"App\">\r\n            <LongdoMap id=\"longdo-map\" mapKey={mapKey} callback={initMap} />\r\n          </div>\r\n        </div>\r\n        <div className=\"col-2\">\r\n          <div className=\"row pb-2\">\r\n            <div className=\"col-3\">\r\n              <label className=\"pe-1\">Type: </label>\r\n              <select\r\n                className=\"form-control\"\r\n                value={assetType}\r\n                onChange={(e) => handleSelectTypeChange(e.target.value)}\r\n              >\r\n                {assetOption.map((opt) => {\r\n                  return (\r\n                    <option key={opt.id} value={opt.key}>\r\n                      {opt.name}\r\n                    </option>\r\n                  )\r\n                })}\r\n              </select>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div\r\n        style={{\r\n          position: \"absolute\",\r\n          background: \"white\",\r\n          width: \"15%\",\r\n          marginTop: \"5px\",\r\n          marginLeft: \"17px\",\r\n          maxHeight: \"500px\",\r\n          overflowX: \"scroll\",\r\n        }}\r\n      >\r\n        {rawData.length > 0 &&\r\n          rawData.map((data, index) => (\r\n            // eslint-disable-next-line react/jsx-key\r\n            <div\r\n              onClick={() => {\r\n                map\r\n                  .location({ lon: data?.Longitude, lat: data?.Latitude }, true)\r\n                  .zoom(19, true)\r\n              }}\r\n            >\r\n              {index + 1} {data.Name}\r\n            </div>\r\n          ))}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\nexport default LongdoMapOOHPage\r\n\r\n// style=\"\r\n//     position: absolute;\r\n//     background: white;\r\n//     width: 15%;\r\n//     margin: 10px 18px;\r\n// \"\r\n","/* eslint-disable react/prop-types */\r\nimport { useMap } from \"react-map-gl\"\r\n\r\nfunction LeftPanel({ title, items, selectedItem, setSelectedItem }) {\r\n  const { current: map } = useMap()\r\n  const handleOnClick = (val) => {\r\n    if (map) {\r\n        map.flyTo({\r\n            center: [val.lon, val.lat],\r\n            zoom:16\r\n        })\r\n    }\r\n    setSelectedItem(val.id)\r\n  }\r\n\r\n  return (\r\n    <div className=\"control-panel\">\r\n      <h4 className=\"text-dark\">{title}</h4>\r\n      <div className=\"list-group\">\r\n        {items &&\r\n          items.map((value, inx) => {\r\n            const classItem = `list-group-item list-group-item-action ${\r\n              value.id === selectedItem ? \"active\" : \"\"\r\n            }`\r\n            return (\r\n              <div\r\n                onClick={() => handleOnClick(value)}\r\n                className={classItem}\r\n                key={value.id}\r\n              >\r\n                {inx + 1} . {value.name}\r\n              </div>\r\n            )\r\n          })}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LeftPanel\r\n","import { useEffect, useState, useRef } from \"react\"\r\nimport Map, {\r\n  NavigationControl,\r\n  Source,\r\n  Popup,\r\n  Layer /* useMap */,\r\n} from \"react-map-gl\"\r\nimport { getDistance } from \"geolib\"\r\nimport LeftPanel from \"./mapbox-component/left-panel\"\r\nimport _ from \"lodash\"\r\nimport \"mapbox-gl/dist/mapbox-gl.css\"\r\n\r\nconst assetOption = [\r\n  {\r\n    id: 1,\r\n    name: \"Pov Office\",\r\n    key: \"POV_LatLong\",\r\n  },\r\n  {\r\n    id: 2,\r\n    name: \"Station\",\r\n    key: \"Station_LatLong\",\r\n  },\r\n]\r\n\r\nconst layerMarkerStyle = {\r\n  id: \"clusters\",\r\n  type: \"circle\",\r\n  filter: [\"has\", \"point_count\"],\r\n  paint: {\r\n    \"circle-color\": [\r\n      \"step\",\r\n      [\"get\", \"point_count\"],\r\n      \"#51bbd6\",\r\n      100,\r\n      \"#f1f075\",\r\n      750,\r\n      \"#f28cb1\",\r\n    ],\r\n    \"circle-radius\": [\"step\", [\"get\", \"point_count\"], 20, 100, 30, 750, 40],\r\n  },\r\n}\r\n\r\nconst layerClusterMarkerStyle = {\r\n  id: \"cluster-count\",\r\n  type: \"symbol\",\r\n  filter: [\"has\", \"point_count\"],\r\n  layout: {\r\n    \"text-field\": [\"get\", \"point_count_abbreviated\"],\r\n    \"text-font\": [\"DIN Offc Pro Medium\", \"Arial Unicode MS Bold\"],\r\n    \"text-size\": 12,\r\n  },\r\n}\r\n\r\nconst layerUnClusterMarkerStyle = {\r\n  id: \"unclustered-point\",\r\n  type: \"symbol\",\r\n  filter: [\"!\", [\"has\", \"point_count\"]],\r\n  layout: {\r\n    \"icon-image\": [\"get\", \"marker-symbol\"],\r\n    \"icon-size\": 0.08,\r\n    \"icon-text-fit\": \"width\",\r\n    \"icon-allow-overlap\": true,\r\n  },\r\n  /*paint: {\r\n    \"circle-color\": \"#11b4da\",\r\n    \"circle-radius\": 12,\r\n    \"circle-stroke-width\": 1,\r\n    \"circle-stroke-color\": \"#fff\",\r\n  },*/\r\n}\r\n\r\nfunction MapBoxPage() {\r\n  const mapRef = useRef()\r\n  //const {current: map} = useMap();\r\n  const [viewState, setViewState] = useState({\r\n    longitude: 100.5018,\r\n    latitude: 13.7563,\r\n    zoom: 10,\r\n  })\r\n  // data state\r\n  const [assetType, setAssetType] = useState(assetOption[0].key)\r\n  const [rawData, setRawDate] = useState({})\r\n  const [markerList, setMarkerList] = useState([])\r\n  const [mapSourceData, setMapSourceData] = useState(null)\r\n  const [selectMarker, setSelectMarker] = useState(null)\r\n  // popup\r\n  const [popupInfo, setPopupInfo] = useState(null)\r\n\r\n  const Count = 5000\r\n  let startTime = new Date().getTime();\r\n  let endTime = new Date().getTime();\r\n\r\n  const handleSelectTypeChange = (assetSelect) => {\r\n    setAssetType(assetSelect)\r\n  }\r\n\r\n  const fetchInfo = async () => {\r\n    const respone = await fetch(\"./location15000.json\")\r\n    return respone.json()\r\n  }\r\n\r\n  const handleMarkerFilter = async () => {\r\n    if (Object.keys(rawData).length) {\r\n      const objectMarkerData = rawData[assetType]\r\n\r\n      if ((objectMarkerData ?? []).length > 0) {\r\n        const clearData = (objectMarkerData ?? []).filter(\r\n          (data) => typeof data.Lat !== \"undefined\"\r\n        )\r\n        const staticFilePath =\r\n          assetType === \"POV_LatLong\" ? \"./pov/\" : \"./station/\"\r\n        const mapModel = clearData.map((data) => {\r\n          return {\r\n            id: data?.ID,\r\n            name: data[\"Name\"] ? data[\"Name\"] : data[\"NameEN\"],\r\n            lat: data[\"Lat\"],\r\n            lon: data[\"Lon\"],\r\n            filename: staticFilePath + data[\"FileName\"],\r\n          }\r\n        })\r\n        setMarkerList(_.orderBy(mapModel, [\"name\"], [\"asc\"]))\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleDataToSource = async () => {\r\n    if (markerList.length > 0) {\r\n      // console.time()\r\n      startTime = new Date().getTime();\r\n      const baseModel = {\r\n        type: \"FeatureCollection\",\r\n      }\r\n      const mapFeatures = markerList.map((data) => {\r\n        return {\r\n          type: \"Feature\",\r\n          geometry: {\r\n            type: \"Point\",\r\n            coordinates: [data.lon, data.lat],\r\n          },\r\n          properties: {\r\n            title: data.name,\r\n            file: data.filename,\r\n            id: data.id,\r\n            \"marker-symbol\":\r\n              assetType === \"Station_LatLong\" ? \"station\" : \"pov\",\r\n          },\r\n        }\r\n      })\r\n      baseModel.features = mapFeatures\r\n      setMapSourceData(baseModel)\r\n      // console.timeEnd();\r\n    }\r\n  }\r\n\r\n  const handleSetShowPopup = (data) => {\r\n    const currentLocation = {\r\n      latitude: data.geometry.coordinates[1],\r\n      longitude: data.geometry.coordinates[0],\r\n    }\r\n\r\n    const findNearBy = markerList.filter((value) => {\r\n      const placeLocation = { latitude: value.lat, longitude: value.lon }\r\n      if (getDistance(currentLocation, placeLocation) <= 2) {\r\n        return value\r\n      }\r\n    })\r\n    console.log(findNearBy)\r\n\r\n    setPopupInfo({\r\n      lngLat: data.geometry.coordinates,\r\n      dataInfo: findNearBy,\r\n    })\r\n  }\r\n\r\n  const handleMapLoadEvent = async () => {\r\n    // wait load image\r\n    const map = mapRef.current\r\n    map.loadImage(\"./images/station.png\", (error, image) => {\r\n      if (error) throw error\r\n\r\n      // Add the image to the map style.\r\n      map.addImage(\"station\", image)\r\n    })\r\n    map.loadImage(\"./images/sign.png\", (error, image) => {\r\n      if (error) throw error\r\n\r\n      // Add the image to the map style.\r\n      map.addImage(\"pov\", image)\r\n    })\r\n  }\r\n\r\n  const handleMapOnClickEvent = async (e) => {\r\n    const features = e.features || []\r\n    const map = mapRef.current\r\n    if (features.length > 0) {\r\n      const feature = features[0]\r\n      if (feature.layer.id === layerMarkerStyle.id) {\r\n        // case on click cluster\r\n        const clusterId = feature.properties.cluster_id\r\n        map\r\n          .getSource(\"map-location-source\")\r\n          .getClusterExpansionZoom(clusterId, (err, zoom) => {\r\n            if (err) return\r\n\r\n            map.easeTo({\r\n              center: features[0].geometry.coordinates,\r\n              zoom: zoom,\r\n            })\r\n          })\r\n      } else if (feature.layer.id === layerUnClusterMarkerStyle.id) {\r\n        // case on click mapker\r\n        setSelectMarker(features[0].properties.id)\r\n        handleSetShowPopup(features[0])\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleMapMouseEnterEvent = async (e) => {\r\n    const features = e.features || []\r\n    if (features.length > 0) {\r\n      const feature = features[0]\r\n      if (feature.layer.id === layerUnClusterMarkerStyle.id) {\r\n        // case on click mapker\r\n        setSelectMarker(features[0].properties.id)\r\n        handleSetShowPopup(features[0])\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleMapMouseLeaveEvent = async () => {\r\n    setPopupInfo()\r\n  }\r\n\r\n  const init = async () => {\r\n    let assetDate = await fetchInfo()\r\n    // eslint-disable-next-line no-debugger\r\n    const arrayList = _.take(assetDate.POV_LatLong, Count)\r\n    assetDate.POV_LatLong = [...arrayList]\r\n    setRawDate(assetDate)\r\n  }\r\n\r\n  // init\r\n  useEffect(() => {\r\n    init()\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    handleMarkerFilter()\r\n  }, [assetType, rawData])\r\n\r\n  useEffect(() => {\r\n    handleDataToSource()\r\n    setPopupInfo()\r\n    setSelectMarker()\r\n  }, [markerList])\r\n  return (\r\n    <>\r\n      <div className=\"row\">\r\n        <div className=\"col-12\">\r\n          <h2>MapBox</h2>\r\n        </div>\r\n      </div>\r\n      <div className=\"row pb-2\">\r\n        <div className=\"col-3\">\r\n          <label className=\"pe-1\">Type: </label>\r\n          <select\r\n            className=\"form-control\"\r\n            value={assetType}\r\n            onChange={(e) => handleSelectTypeChange(e.target.value)}\r\n          >\r\n            {assetOption.map((opt) => {\r\n              return (\r\n                <option key={opt.id} value={opt.key}>\r\n                  {opt.name}\r\n                </option>\r\n              )\r\n            })}\r\n          </select>\r\n        </div>\r\n        <div className=\"col-9 d-flex align-items-center\">\r\n          <div>insight : age 20 - 90 , income : 20000- 40000</div>\r\n        </div>\r\n      </div>\r\n      <div>\r\n        {markerList.length > 0 && (\r\n          <div>\r\n            <Map\r\n              {...viewState}\r\n              ref={mapRef}\r\n              onMove={(evt) => setViewState(evt.viewState)}\r\n              style={{ width: \"100%\", height: \"85vh\" }}\r\n              mapStyle=\"mapbox://styles/mapbox/streets-v12?optimize=true\"\r\n              interactiveLayerIds={[\r\n                layerMarkerStyle.id,\r\n                layerUnClusterMarkerStyle.id,\r\n              ]}\r\n              minZoom={5}\r\n              onIdle={() => {\r\n                endTime = new Date().getTime();\r\n                console.log( (endTime - startTime) / 1000)\r\n              }}\r\n              // onRender={(e) => {console.log(e)}}\r\n              onLoad={handleMapLoadEvent}\r\n              onClick={handleMapOnClickEvent}\r\n              onMouseEnter={handleMapMouseEnterEvent}\r\n              onMouseLeave={handleMapMouseLeaveEvent}\r\n              mapboxAccessToken=\"pk.eyJ1IjoidGhhbnlhcGF0aHMiLCJhIjoiY2xleHppYTNtMDR2bzNzbWp1OXBsemMzdCJ9.gy7uL4vDxEsgb36qmjhU1g\"\r\n            >\r\n              {mapSourceData && (\r\n                <Source\r\n                  id=\"map-location-source\"\r\n                  type=\"geojson\"\r\n                  cluster={true}\r\n                  data={mapSourceData}\r\n                >\r\n                  <Layer {...layerMarkerStyle} />\r\n                  <Layer {...layerClusterMarkerStyle} />\r\n                  <Layer {...layerUnClusterMarkerStyle} />\r\n                </Source>\r\n              )}\r\n              {popupInfo && (\r\n                <Popup\r\n                  tipSize={5}\r\n                  longitude={popupInfo.lngLat[0]}\r\n                  latitude={popupInfo.lngLat[1]}\r\n                  onClose={() => setPopupInfo(null)}\r\n                >\r\n                  {popupInfo?.dataInfo.map((data) => {\r\n                    return (\r\n                      <div key={data.id} className=\"card\">\r\n                        <img className=\"card-img-top\" src={data.filename} />\r\n                        <div className=\"card-body\">\r\n                          <p className=\"card-text\">{data.name}</p>\r\n                        </div>\r\n                      </div>\r\n                    )\r\n                  })}\r\n                </Popup>\r\n              )}\r\n              <NavigationControl />\r\n              <LeftPanel\r\n                title={assetOption.find((a) => a.key === assetType).name ?? \"\"}\r\n                items={markerList}\r\n                selectedItem={selectMarker}\r\n                setSelectedItem={setSelectMarker}\r\n              />\r\n            </Map>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default MapBoxPage\r\n","import React from \"react\"\r\nimport { GoogleMap, useLoadScript } from \"@react-google-maps/api\"\r\n\r\nconst initialCenter = { lat: 13.750482276969035, lng: 100.52021766870401 }\r\n\r\nconst options = {\r\n  disableDefaultUI: true,\r\n  scaleControl: true,\r\n  mapTypeId: \"roadmap\",\r\n  labels: true,\r\n  gestureHandling: \"greedy\"\r\n}\r\n\r\nconst Map = (props) => {\r\n  // eslint-disable-next-line react/prop-types\r\n  const { setMap, defaultZoom, children } = props\r\n  const { isLoaded, loadError } = useLoadScript({\r\n    googleMapsApiKey: \"AIzaSyCw4G2zRuRwZwOXcLyEokua7JqWvOxBEwM\", // ,\r\n    // ...otherOptions\r\n  })\r\n\r\n  const renderMap = () => {\r\n    // wrapping to a function is useful in case you want to access `window.google`\r\n    // to eg. setup options or create latLng object, it won't be available otherwise\r\n    // feel free to render directly if you don't need that\r\n\r\n    // const onLoad = React.useCallback(function onLoad(mapInstance) {\r\n    //   // do something with map Instance\r\n    //   setMapRef(mapInstance);\r\n    // });\r\n\r\n    const loadHandler = (map) => {\r\n      setMap(map)\r\n    }\r\n\r\n    return (\r\n      <GoogleMap\r\n        id=\"google-cluster-map\"\r\n        mapContainerStyle={{\r\n          height: \"100vh\",\r\n          width: \"100%\",\r\n        }}\r\n        zoom={defaultZoom}\r\n        center={initialCenter}\r\n        options={options}\r\n        onLoad={loadHandler}\r\n      >\r\n        {children}\r\n      </GoogleMap>\r\n    )\r\n  }\r\n\r\n  if (loadError) {\r\n    return <div>Map cannot be loaded right now, sorry.</div>\r\n  }\r\n\r\n  return isLoaded ? renderMap() : <div>Loading...</div>\r\n}\r\n\r\nexport default Map\r\n","/* eslint-disable no-undef */\r\nimport { Marker } from \"@react-google-maps/api\"\r\n\r\nconst CustomMarker = (props) => {\r\n  // eslint-disable-next-line react/prop-types\r\n  const { position, clusterer, fnOnClickMarker, markerType } = props\r\n  const buildingIcon = {\r\n    url: \"./images/sign.png\",\r\n    anchor: new google.maps.Point(17, 46),\r\n    scaledSize: new google.maps.Size(45, 45)\r\n  }\r\n  const stationIcon = {\r\n    url: \"./images/station.png\",\r\n    anchor: new google.maps.Point(17, 46),\r\n    scaledSize: new google.maps.Size(45, 45)\r\n  }\r\n  \r\n  return (\r\n    <Marker\r\n      position={position}\r\n      clusterer={clusterer}\r\n      onClick={fnOnClickMarker}\r\n      options={{ icon: markerType.toString().toLowerCase().indexOf(\"pov\") >= 0 ? buildingIcon : stationIcon }}\r\n    />\r\n  )\r\n}\r\n\r\nexport default CustomMarker\r\n","/* eslint-disable no-unused-vars */\r\n/* eslint-disable react/prop-types */\r\n/* eslint-disable no-undef */\r\nimport { useState, useEffect, useMemo } from \"react\"\r\nimport Map from \"./Map\"\r\nimport { MarkerClusterer, InfoWindow } from \"@react-google-maps/api\"\r\n// import uuidv4 from \"uuid/v4\";\r\nimport { v4 as uuidv4 } from \"uuid\"\r\nimport CustomMarker from \"./CustomMarker\"\r\n\r\n// const locations1 = [\r\n//   { lat: -31.56391, lng: 147.154312 },\r\n//   { lat: -33.718234, lng: 150.363181 },\r\n//   { lat: -33.727111, lng: 150.371124 },\r\n//   { lat: -33.848588, lng: 151.209834 },\r\n//   { lat: -33.851702, lng: 151.216968 },\r\n//   { lat: -34.671264, lng: 150.863657 },\r\n//   { lat: -35.304724, lng: 148.662905 },\r\n//   { lat: -36.817685, lng: 175.699196 },\r\n//   { lat: -36.828611, lng: 175.790222 },\r\n//   { lat: -37.75, lng: 145.116667 },\r\n//   { lat: -37.759859, lng: 145.128708 },\r\n//   { lat: -37.765015, lng: 145.133858 },\r\n//   { lat: -37.770104, lng: 145.143299 },\r\n//   { lat: -37.7737, lng: 145.145187 },\r\n// ]\r\n// const locations2 = [\r\n//   { lat: -37.774785, lng: 145.137978 },\r\n//   { lat: -37.819616, lng: 144.968119 },\r\n//   { lat: -38.330766, lng: 144.695692 },\r\n//   { lat: -39.927193, lng: 175.053218 },\r\n//   { lat: -41.330162, lng: 174.865694 },\r\n//   { lat: -42.734358, lng: 147.439506 },\r\n//   { lat: -42.734358, lng: 147.501315 },\r\n//   { lat: -42.735258, lng: 147.438 },\r\n//   { lat: -43.999792, lng: 170.463352 },\r\n// ]\r\n\r\nconst MapContainer = ({ locations, locationType, defaultCenter, defaultZoom }) => {\r\n  const [map, setMap] = useState(null)\r\n  const [locs, setLocs] = useState([])\r\n  // const [locs, setLocs] = useState(locations1)\r\n  // const [toggle, setToggle] = useState(false)\r\n  const [selectedMarker, setSelectedMarker] = useState(null)\r\n  const imagePath = locationType.toString().toLowerCase().indexOf(\"pov\") >= 0 ? \"./pov/\" : \"./station/\"\r\n\r\n  useEffect(() => {\r\n    if (map) {\r\n      // map.panTo(...)\r\n      mapFitBounds()\r\n    }\r\n  }, [map])\r\n\r\n  const mapFitBounds = () => {\r\n    // console.log(\"mapFitBounds:map> \", map);\r\n    if (!map) return\r\n\r\n    const bounds = new google.maps.LatLngBounds()\r\n    locs.map((loc) => {\r\n      bounds.extend(new google.maps.LatLng(loc.lat, loc.lng))\r\n    })\r\n\r\n    map.fitBounds(bounds)\r\n  }\r\n\r\n  //   function removeMarker() {\r\n  //     setLocs(locs => (toggle ? locations1 : locations2));\r\n  //     setToggle(!toggle);\r\n  //   }\r\n\r\n  //   function removeSome() {\r\n  //     let _locs = [...locs];\r\n  //     const removeValFromIndex = [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20];\r\n\r\n  //     for (var i = removeValFromIndex.length - 1; i >= 0; i--)\r\n  //       _locs.splice(removeValFromIndex[i], 1);\r\n\r\n  //     setLocs(_locs);\r\n  //   }\r\n\r\n  //   useEffect(() => {\r\n  //     const listener = (e) => {\r\n  //       if (e.key === \"Escape\") {\r\n  //         setSelectedMarker(null)\r\n  //       }\r\n  //     }\r\n  //     window.addEventListener(\"keydown\", listener)\r\n  //     return () => {\r\n  //       window.removeEventListener(\"keydown\", listener)\r\n  //     }\r\n  //   }, [])\r\n\r\n  useEffect(() => {\r\n    setLocs(\r\n      locations.map((item) => {\r\n        return {\r\n          id: item?.ID,\r\n          name: item?.Name,\r\n          fileName: item?.FileName,\r\n          lat: item?.Lat,\r\n          lng: item?.Lon,\r\n        }\r\n      })\r\n    )\r\n  }, [locations])\r\n\r\n  const onClickMarker = (markerInfo) => {\r\n    setSelectedMarker(markerInfo)\r\n  }\r\n\r\n  const onCloseInfoWindow = () => {\r\n    setSelectedMarker(null)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!map) return\r\n    if (defaultCenter) {\r\n      const bounds = new google.maps.LatLngBounds()\r\n      bounds.extend(new google.maps.LatLng(defaultCenter.lat, defaultCenter.lng))\r\n      map.fitBounds(bounds)\r\n    } else {\r\n      mapFitBounds()\r\n    }\r\n  }, [defaultCenter])\r\n\r\n  const mapWrapper = useMemo(() => {\r\n    return (\r\n      <Map setMap={setMap} defaultZoom={defaultZoom}>\r\n        <MarkerClusterer>\r\n          {(clusterer) =>\r\n            locs.map((loc) => (\r\n              <CustomMarker\r\n                key={uuidv4()}\r\n                position={{ lat: loc?.lat, lng: loc?.lng }}\r\n                clusterer={clusterer}\r\n                fnOnClickMarker={() => onClickMarker(loc)}\r\n                markerType={locationType}\r\n              />\r\n            ))\r\n          }\r\n        </MarkerClusterer>\r\n        {selectedMarker && (\r\n          <InfoWindow position={{ lat: selectedMarker?.lat, lng: selectedMarker?.lng }} onCloseClick={onCloseInfoWindow}>\r\n            <div>\r\n              <h3>{selectedMarker?.name}</h3>\r\n              <img src={`${imagePath}${selectedMarker?.fileName}`} />\r\n            </div>\r\n          </InfoWindow>\r\n        )}\r\n        {selectedMarker && (\r\n          <div\r\n            style={{\r\n              position: \"absolute\",\r\n              zIndex: \"1000\",\r\n              backgroundColor: \"#fff\",\r\n              right: \"10px\",\r\n              bottom: \"60%\",\r\n              padding: \"10px\",\r\n              borderRadius: \"4px\",\r\n            }}\r\n          >\r\n            <div>\r\n              <div style={{ cursor: \"pointer\", textAlign: \"right\" }} onClick={onCloseInfoWindow}>\r\n                &times;\r\n              </div>\r\n              <h3>{selectedMarker?.name}</h3>\r\n              <img src={`${imagePath}${selectedMarker?.fileName}`} />\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Map>\r\n    )\r\n  }, [locs, selectedMarker])\r\n\r\n  return (\r\n    <div>\r\n      {mapWrapper}\r\n      {/* <button style={{ margin: 8 }} onClick={() => removeMarker()}>\r\n        {locs.length !== 0 ? \"Remove all markers\" : \"Add all markers\"}\r\n      </button>\r\n      <button style={{ margin: 8 }} onClick={() => removeSome()}>\r\n        {locs.length !== 0 ? \"Remove some markers\" : \"Add some markers\"}\r\n      </button> */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MapContainer\r\n","/* eslint-disable no-undef */\r\nimport { Fragment, useEffect, useState } from \"react\"\r\nimport MapContainer from \"../google-cluster-map/MapContainer\"\r\n\r\nconst LOCATION_TYPE = {\r\n  POV_LatLong: \"POV Office\",\r\n  Station_LatLong: \"Station\",\r\n}\r\n\r\nconst GoogleMapClusterPage = () => {\r\n  const [locationType, setLocationType] = useState(\"POV Office\")\r\n  const [locationData, setLocationData] = useState(null)\r\n  const [locationFiltered, setLocationFiltered] = useState([])\r\n  const [defaultCenter, setDefaultCenter] = useState({ lat: 13.750482276969035, lng: 100.52021766870401 })\r\n  const defaultZoom = 8\r\n\r\n  const fetchLocationInfo = async () => {\r\n    const respone = await fetch(\"./location.json\")\r\n    return respone.json()\r\n  }\r\n\r\n  const onChangeLocationType = (e) => {\r\n    setLocationType(LOCATION_TYPE[e.target.value])\r\n    setLocationFiltered(locationData[e.target.value])\r\n    setDefaultCenter(null)\r\n  }\r\n\r\n  const initialize = async () => {\r\n    const rawDataLocations = await fetchLocationInfo()\r\n    setLocationData(rawDataLocations)\r\n    setLocationFiltered(rawDataLocations[\"POV_LatLong\"])\r\n  }\r\n\r\n  useEffect(() => {\r\n    initialize()\r\n  }, [])\r\n\r\n  const onFocusMarker = (locationDetail) => { \r\n    setDefaultCenter({ lat: locationDetail?.Lat, lng: locationDetail?.Lon })    \r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <div style={{ fontSize: \"22px\", fontWeight: \"bold\", marginTop: \"10px\" }}>Google Map</div>\r\n      <div style={{ marginTop: \"10px\" }}>\r\n        <select onChange={onChangeLocationType} style={{ marginTop: \"8px\", padding: \"8px\" }}>\r\n          <option value=\"POV_LatLong\">POV Office</option>\r\n          <option value=\"Station_LatLong\">Station</option>\r\n        </select>\r\n      </div>\r\n      <div style={{ border: \"1px solid\", borderRadius: \"4px\", padding: \"10px\", margin: \"10px 10px 0 10px\" }}>{locationType}</div>\r\n      <div style={{ border: \"1px solid\", borderRadius: \"4px\", padding: \"10px\", margin: \"10px\" }}>\r\n        Insight\r\n        <div>- Age 15 - 50</div>\r\n        <div>- Income 20,000 - 40,000</div>\r\n        <div>- Gender Male/Female 40/60</div>\r\n      </div>\r\n      <div>\r\n        <div\r\n          style={{\r\n            position: \"absolute\",\r\n            zIndex: \"1000\",\r\n            backgroundColor: \"#fff\",\r\n            padding: \"10px\",\r\n            borderRadius: \"4px\",\r\n            marginLeft: \"20px\",\r\n            marginTop: \"20px\",\r\n            minWidth: \"300px\",\r\n            maxHeight: \"500px\",\r\n            overflowX: \"scroll\",\r\n          }}\r\n        >\r\n          <div style={{ paddingBottom: \"10px\" }}>{locationType}</div>\r\n          {locationFiltered.map((location, index) => (\r\n            <div\r\n              key={index}\r\n              onClick={() => {\r\n                onFocusMarker(location)\r\n              }}\r\n              className=\"list-item\"\r\n            >{`${index + 1}. ${location?.Name} (${location?.ID})`}</div>\r\n          ))}\r\n        </div>\r\n        <div style={{ height: \"100vh\", width: \"100%\" }}>\r\n          {locationFiltered && locationFiltered.length > 0 && <MapContainer locations={locationFiltered} locationType={locationType} defaultCenter={defaultCenter} defaultZoom={defaultZoom} />}\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default GoogleMapClusterPage\r\n","import \"./App.css\";\r\nimport Proximity from \"./pages/proximity\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\nimport ChartPage from \"./pages/chartpage\";\r\nimport ChartD3 from \"./pages/chartd3\";\r\nimport LeafMap from \"./pages/leafpage\";\r\nimport PocPage from \"./poc/poc\";\r\nimport LongdoMapPage from './pages/longdoMap';\r\nimport LongdoMapOOHPage from './pages/longdoMapOOH';\r\nimport MapBoxPage from \"./pages/mapboxMap\";\r\nimport GoogleMapClusterPage from \"./pages/googleMapCluster\"\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div className=\"container-fluid\">\r\n        <nav>\r\n        <ul>\r\n            {/* <li>\r\n              <Link to=\"/\">Map</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/chart\">Chart</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/d3chart\">d3Chart</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/poc\">Poc</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/leaf\">leaf</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/longdo\">longdo</Link>\r\n            </li> */}\r\n            <li>\r\n              <Link to=\"/longdoOOH\">longdoOOH</Link>\r\n            </li>\r\n            <li>\r\n            <Link to=\"/mapbox\">mapbox</Link>\r\n            </li>\r\n            <li>\r\n            <Link to=\"/GoogleMapCluster\">Google Map</Link>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n        <div className=\"row\">\r\n          <Switch>            \r\n            <Route path=\"/chart\">\r\n              <ChartPage />\r\n            </Route>\r\n            <Route path=\"/d3chart\">\r\n              <ChartD3 />\r\n            </Route>\r\n            <Route path=\"/poc\">\r\n              <PocPage />\r\n            </Route>\r\n            <Route path=\"/leaf\">\r\n              <LeafMap />\r\n            </Route>\r\n            <Route path=\"/longdo\">\r\n              <LongdoMapPage />\r\n            </Route>\r\n            <Route path=\"/longdoOOH\">\r\n              <LongdoMapOOHPage />\r\n            </Route>\r\n            <Route path=\"/mapbox\">\r\n              <MapBoxPage/>\r\n            </Route>\r\n            <Route path=\"/GoogleMapCluster\">\r\n              <GoogleMapClusterPage />\r\n            </Route>\r\n            <Route path=\"/\">\r\n              <Proximity />\r\n            </Route>\r\n          </Switch>\r\n        </div>\r\n      </div>\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport reportWebVitals from './reportWebVitals'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}